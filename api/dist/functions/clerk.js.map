{
  "version": 3,
  "sources": ["../../src/functions/clerk.ts"],
  "sourcesContent": ["import { VerifyOptions, verifyEvent } from '@redwoodjs/api/webhooks'\n\nexport const handler = async (event: any) => {\n  try {\n    const options: VerifyOptions = {\n      signatureHeader: 'svix-signature',\n      signatureTransformer: (signature: string) => {\n        // Clerk can pass a space separated list of signatures.\n        // Let's just use the first one that's of version 1\n        const passedSignatures = signature.split(' ')\n\n        for (const versionedSignature of passedSignatures) {\n          const [version, signature] = versionedSignature.split(',')\n\n          if (version === 'v1') {\n            return signature\n          }\n        }\n      },\n    }\n\n    const svix_id = event.headers['svix-id']\n    const svix_timestamp = event.headers['svix-timestamp']\n\n    const payload = `${svix_id}.${svix_timestamp}.${event.body}`\n\n    verifyEvent('base64Sha256Verifier', {\n      event,\n      secret: process.env.CLERK_WH_SECRET.slice(6),\n      payload,\n      options,\n    })\n\n    const parsedPayload = JSON.parse(event.body)\n\n    const data = parsedPayload?.data\n\n    // Safely use the validated webhook payload\n    const firstName = data?.first_name\n    const lastName = data?.last_name\n    const emailAddress = data?.email_addresses?.[0]?.email_address\n    const cellPhone = data?.phone_numbers?.[0]?.phone_number\n    const imageUrl = data?.image_url\n    const clerkUserId = data?.id\n\n    const dataForRequest = {\n      firstName,\n      lastName,\n      emailAddress,\n      cellPhone,\n      imageUrl,\n      clerkUserId,\n    }\n\n    return {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      statusCode: 200,\n      body: JSON.stringify({\n        data: dataForRequest,\n      }),\n    }\n  } catch (e) {\n    console.log(e)\n    return {\n      statusCode: 401,\n    }\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,sBAA2C;AAEpC,MAAMA,UAAU,OAAOC,UAAe;AAC3C,MAAI;AAAA,QAAAC;AACF,UAAMC,UAAyB;MAC7BC,iBAAiB;MACjBC,sBAAuBC,eAAsB;AAG3C,cAAMC,mBAAmBD,UAAUE,MAAM,GAAG;AAE5C,mBAAWC,sBAAsBF,kBAAkB;AACjD,gBAAM,CAACG,SAASJ,UAAS,IAAIG,mBAAmBD,MAAM,GAAG;AAEzD,cAAIE,YAAY,MAAM;AACpB,mBAAOJ;UACT;QACF;MACF;IACF;AAEA,UAAMK,UAAUV,MAAMW,QAAQ,SAAS;AACvC,UAAMC,iBAAiBZ,MAAMW,QAAQ,gBAAgB;AAErD,UAAME,UAAW,GAAEH,OAAQ,IAAGE,cAAe,IAAGZ,MAAMc,IAAK;AAE3DC,qCAAY,wBAAwB;MAClCf;MACAgB,YAAQC,aAAAA,SAAAhB,WAAAiB,QAAQC,IAAIC,eAAe,EAAAC,KAAApB,UAAO,CAAC;MAC3CY;MACAX;IACF,CAAC;AAED,UAAMoB,gBAAgBC,KAAKC,MAAMxB,MAAMc,IAAI;AAE3C,UAAMW,OAAOH,eAAeG;AAG5B,UAAMC,YAAYD,MAAME;AACxB,UAAMC,WAAWH,MAAMI;AACvB,UAAMC,eAAeL,MAAMM,kBAAkB,CAAC,GAAGC;AACjD,UAAMC,YAAYR,MAAMS,gBAAgB,CAAC,GAAGC;AAC5C,UAAMC,WAAWX,MAAMY;AACvB,UAAMC,cAAcb,MAAMc;AAE1B,UAAMC,iBAAiB;MACrBd;MACAE;MACAE;MACAG;MACAG;MACAE;IACF;AAEA,WAAO;MACL3B,SAAS;QACP,gBAAgB;MAClB;MACA8B,YAAY;MACZ3B,UAAM4B,iBAAAA,SAAe;QACnBjB,MAAMe;MACR,CAAC;IACH;EACF,SAASG,GAAG;AACVC,YAAQC,IAAIF,CAAC;AACb,WAAO;MACLF,YAAY;IACd;EACF;AACF;",
  "names": ["handler", "event", "_context", "options", "signatureHeader", "signatureTransformer", "signature", "passedSignatures", "split", "versionedSignature", "version", "svix_id", "headers", "svix_timestamp", "payload", "body", "verifyEvent", "secret", "_sliceInstanceProperty", "process", "env", "CLERK_WH_SECRET", "call", "parsedPayload", "JSON", "parse", "data", "firstName", "first_name", "lastName", "last_name", "emailAddress", "email_addresses", "email_address", "cellPhone", "phone_numbers", "phone_number", "imageUrl", "image_url", "clerkUserId", "id", "dataForRequest", "statusCode", "_JSON$stringify", "e", "console", "log"]
}
